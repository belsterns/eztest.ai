generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  uuid              String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name         String   @db.VarChar(255)
  organization_name String   @db.VarChar(255)
  email             String   @unique
  password          String
  org_role_uuid     String   @db.Uuid
  created_by        String?
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  org_role        org_roles         @relation(fields: [org_role_uuid], references: [uuid], onDelete: Cascade)
  user_workspaces user_workspaces[]
  repositories    repositories[]
}

model org_roles {
  uuid        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  users users[]
}

model workspaces {
  uuid        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  user_workspaces user_workspaces[]

  repositories repositories[]
}

model user_workspaces {
  uuid           String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_uuid      String   @db.Uuid
  workspace_uuid String   @db.Uuid
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  user      users      @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  workspace workspaces @relation(fields: [workspace_uuid], references: [uuid], onDelete: Cascade)

  @@unique([user_uuid, workspace_uuid])
}

model repositories {
  uuid              String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_uuid         String   @db.Uuid
  workspace_uuid    String   @db.Uuid
  host_url          String
  repo_url          String   @unique
  webhook_uuid      String   @unique
  remote_origin     String
  organization_name String
  repo_name         String   @unique
  token             String
  is_active         Boolean  @default(true)
  is_initialized    Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  user      users      @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  workspace workspaces @relation(fields: [workspace_uuid], references: [uuid], onDelete: Cascade)
}
