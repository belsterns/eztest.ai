name: Deploy to STAGING environment

on:
  push:
    branches:
      - staging

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.CONTAINER_REGISTRY_PAT_TOKEN }}
          registry: ghcr.io

      - name: Build Docker image
        run: |
          docker build -f ./Dockerfile -t ghcr.io/${{ github.repository }}/app/${{ github.ref_name }}:latest . --no-cache
          docker build -f ./Dockerfile.db.staging -t ghcr.io/${{ github.repository }}/migrator/${{ github.ref_name }}:latest . --no-cache

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository }}/app/${{ github.ref_name }}:latest
          docker push ghcr.io/${{ github.repository }}/migrator/${{ github.ref_name }}:latest

      - name: Delete older local images
        run: |
          app_images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "ghcr.io/${{ github.repository }}/app/${{ github.ref_name }}" | grep -v ':latest' || true)
          migrator_images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "ghcr.io/${{ github.repository }}/migrator/${{ github.ref_name }}" | grep -v ':latest' || true)
          
          if [ -z "$app_images" ] && [ -z "$migrator_images" ]; then
            echo "No old images found to delete."
          else
            for image in $app_images $migrator_images; do
              echo "Removing old image $image"
              docker rmi "$image" || echo "Failed to remove image $image"
            done
          fi
          
          docker builder prune -f || echo "Failed to prune builder cache"


  pull-deploy:
    needs: build-push
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_KEY }}

      - name: Install gettext (for envsubst)
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext

      - name: Deploy to Server
        env:
          DEV_SERVER_IP: ${{ secrets.DEV_SERVER_IP }}
          STAGING_PRJ_PATH: ${{ secrets.STAGING_PRJ_PATH }}
        run: |
          ssh -o LogLevel=verbose -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_IP }} << EOF
          sudo docker login --username ${{ github.actor }} --password ${{ secrets.CONTAINER_REGISTRY_PAT_TOKEN }} ghcr.io
          sudo docker image pull ghcr.io/${{ github.repository }}/app/${{ github.ref_name }}:latest
          sudo docker image pull ghcr.io/${{ github.repository }}/migrator/${{ github.ref_name }}:latest
          sudo docker compose -f ${STAGING_PRJ_PATH}/docker-compose.yml up -d --force-recreate
          sudo docker image prune -f
          EOF